<?xml version="1.0"?>
<files>
	<file>
		<info>
			<name>Base#Objectname#.php</name>
			<location>_base/_domain</location>
		</info>
		<section>
			<template>
				class Base#Objectname# extends Object
				{
					#section.constructor#
					#section.getters#
					#section.setters#
					#section.associations#
				}
			</template>
		</section>
		<section id="constructor">
			<template>
				function __construct(#fieldlist#)
				{
					#fieldlist#
				}
			</template>
		</section>
		<section id="getters">
			<!-- filter is to help us ignore the field types we don't want -->
			<filter>
				<case attribute="name" neq="_" />
				<case attribute="name" neq="id" />
				<case attribute="type" neq="many" />
			</filter>
			<template>
				function Get#Field#()
				{
					if ($this->isGhost()) $this->PopulateMe();
					#clause#
					return $this->#field#;
				}
			</template>
			<case condition="#field.calculated#==true">if (empty($this->#field#)) $this->#field# = #field.calculated#;</case>
			<case condition="!empty(#field.linkedObject#)">if (!is_a($this->#field#, '#field.linkedObject#')) $this->#field# = new #field.linkedObject#($this->#field#);</case>
			<case condition="#field.timestamp">$this->#field# = (empty($format)) ? $this->#field# : date($format, $this->#field#);</case>
			<case condition="default"></case> 
		</section>
		
		<section id="setters">
			<filter>
				<case attribute="name" neq="_" />
				<case attribute="name" neq="id" />
				<case attribute="type" neq="many" />
			</filter>
			<template>
				function Set#Field#($#field#='') { $this->#field# = $#field#; }
			</template> 
		</section>
		
		<section id="associations">
			<filter>
				<case attribute="type" eq="many" />
			</filter>
			<template>
				function hasPackages() { return ($this->CountPackages() > 0) ? true : false; }
					
				function CountPackages()
				{
					if ($this->isGhost()) $this->PopulateMe();
					if (empty($this->count_packages))
					{
						$packages_mapper = new Packages();
						$this->count_packages = $packages_mapper->GetTotalRowsByVenue($this);
					}
					return $this->count_packages;
				}
				
				function GetPackages($page='')
				{
					if ($this->isGhost()) $this->PopulateMe();
					if (empty($this->packages))
					{
						$packages_mapper = new Packages();
						$this->packages = $packages_mapper->FindByVenue($this, $page);
					}
					return $this->packages;
				}
			</template>
		</section>
	</file>
	
	<file>
		<info>
			<name>#Objectname#.php</name>
			<location>_base/_domain</location>
		</info>
		<section>
			<template>
				class #Objectname# extends Base#Objectname# {}
			</template>
		</section>
	</file>
	
	<file>
		<info>
			<name>Base#Objectname#Test.php</name>
			<location>_test/_base/_domain</location>
		</info>
		<section>
			<template>
				class Base#Objectname#Test extends PHPUnit
				{
				}
			</template>
		</section>
	</file>
	
	<file>
		<info>
			<name>#Objectname#Test.php</name>
			<location>_test/_classes/_domain</location>
		</info>
		<section>
			<template>
				class #Objectname#Test extends Base#Objectname#Test
				{
				}
			</template>
		</section>
	</file>
</files>